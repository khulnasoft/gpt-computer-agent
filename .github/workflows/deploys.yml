name: Deploys

on:
  workflow_dispatch: 
  workflow_run:
    workflows: ["Release Generator"]
    types:
      - completed  

permissions:
  packages: write      


concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event }}
  cancel-in-progress: true
jobs:

  tagext:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    env:
      OS: ${{ matrix.os }}
      PYTHON: '3.8'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Getting Tag
        id: tag_extractor
        run: echo "latest_tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"

      - name: Getting Tag 2
        id: tag_extractor_2
        run: |
          TAG=${{ steps.tag_extractor.outputs.latest_tag }}   
          echo "latest_tag_2=${TAG:1} " >> "$GITHUB_OUTPUT"
      
    outputs:
      tag: ${{ steps.tag_extractor.outputs.latest_tag }}

  pypi:
    needs: tagext
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: Deploys
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}


    - name: Build and Publish Python Packages
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine      
        python setup.py sdist
        twine upload dist/*


  windows:
    permissions: write-all
    needs: tagext
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
    
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
            python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[default]
          pip install .[assistantc]
          pip install embedchain[poe]
          pip install pyinstaller

        
      - name: Run PyInstaller
        run: |
          pyinstaller app.spec
          mv dist/GPT_Computer_Agent.exe GPT_Computer_Agent_windows.exe
        

      - uses: AButler/upload-release-assets@v3.0
        with:
          files: "GPT_Computer_Agent_windows.exe"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ needs.tagext.outputs.tag }}




  macos:
    permissions: write-all
    needs: tagext
    runs-on: macos-latest
    steps:
      
      - name: Checkout Repository
        uses: actions/checkout@v4
    
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
            python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .[default]
          pip install .[assistantc]
          pip install embedchain[poe]
          pip install pyinstaller

        
      - name: Run PyInstaller
        run: |
          pyinstaller app.spec
          mv dist/GPT_Computer_Agent GPT_Computer_Agent_macos
        

      - uses: AButler/upload-release-assets@v3.0
        with:
          files: "GPT_Computer_Agent_macos"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ needs.tagext.outputs.tag }}
